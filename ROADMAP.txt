The Roadmap for Quantum Engine and the Todo's as it stands:

IMPORTANT:
Current required tools
c/c++ compiler
cmake
OpenGL
GLWF (will install itself at build)

To develop a minimum viable product Quantum Engine needs all of these features:
3D Graphics implementation for several file types
    Successfully prove swapping graphics engines
    Interactable with 3D features
    Input/Output handling and recognition

Coherent project management UI and file structure
    Able to select files and modules on a session by session basis
    Export completed projects with and without associated modules

Module control and mechanisms
    User defined modules
    Seamlessly add modules and swap equivalent parts

Further development:
    Asset store for modules and project parts
    Remote development support
    Node based shader/pipeline editor
    Version control for modules

Current TODOs
    Unit testing for all classes
    Verify current version stability for Windows and Linux systems [Devan]
        qFile will help with this
        fix qMat and qVec double free errors
            implement qTest
        verify memory security
            memory was not secure XD
        Linux:
            Linux handles scoping REALLY goofy and sometimes decides to throw imortant variables out of scope
            we'll need to track this with the debugger and find out why.
        Windows:
            Until we can get our own development environment set up on a Windows PC we'll need to put a pin in this
            This is obviously a bad idea
    qFile as file wrapper and handler [Devan]
        hanle opening and closing of all files
        organize files into a folder system
        handle IO functions
        Implemnt unit testing
        File Interpreter as a seperate module which can be called as a function
            .obj .stl .amf .fbx .gltf .usd/usdz .blend (hypothetically)
            users would include these in a folder within qFile. we could then easily automate the inclusion of these
                and the install process through the asset store and github
    File system and user interface [Courage] 
        Organize all project files into a folder system
        Design a file type that will allow us to read what parts go where for a project
        Design a usable and modular interface 
    Rebuild qMesh and qOpenGL to be more modular [FOR GRABS]
        use qFile to handle file interactions
        remove dependency on c preprocessor...
        export as one module which can be easily used in place of another
        Will need node shader editor
    Modularize screen and rendering [FOR GRABS]
        unsure yet how to proceed, will need time to experiment and ideas

    IDEAS BOARD
        Handling objects as a set of files instead of one continuous file
            saves us from having to design our own file design
            users could specify using our own file design later when we actually have one
        github integration
            native github integration might not be feasible due to licensing but it would be awesome